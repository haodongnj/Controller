#ifndef PI_H
#define PI_H

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
    float kp ;
    float ki ;
    float ts ;
    float sum_ki ;
    float output ;
    float reference ;
} PI_t;

/**
 * @brief Initialize pid controller
 *  kp and ki are the parameter generated by s transfer function
 *  Transfer function :
 *                    ki
 *      G(s) = kp + ------
 *                    s
 *  Actually, the corresponding transfer function in z domain:
 *                      ki * z
 *      G(z) = kp + ---------------
 *                      z - 1
 *
 * @param s pointer to PI_t struct
 * @param kp Value of kp
 * @param ki Value of ki
 * @param ts Value of sampling period
 */
void pi_init(PI_t *s, float kp, float ki, float ts);

/**
 * @brief
 * PI controller is really simple.
 * You can implement anti-saturation or other features by yourself.
 * pid_calc should be called every control period.
 *
 * @param s pointer to PI_t struct
 * @param feedback Value of feedback signal
 * @return float Output of PI controller
 */
float pi_calc(PI_t *s, float reference, float feedback);

#ifdef __cplusplus
}
#endif

#endif
